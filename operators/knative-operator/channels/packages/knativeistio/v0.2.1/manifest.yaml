
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app: knative-ingressgateway
    chart: gateways-1.0.1
    heritage: Tiller
    knative: ingressgateway
    release: RELEASE-NAME
  name: knative-ingressgateway
  namespace: istio-system
spec:
  ports:
  - name: http2
    nodePort: 32380
    port: 80
    targetPort: 80
  - name: https
    nodePort: 32390
    port: 443
  - name: tcp
    nodePort: 32400
    port: 31400
  - name: tcp-pilot-grpc-tls
    port: 15011
    targetPort: 15011
  - name: tcp-citadel-grpc-tls
    port: 8060
    targetPort: 8060
  - name: tcp-dns-tls
    port: 853
    targetPort: 853
  - name: http2-prometheus
    port: 15030
    targetPort: 15030
  - name: http2-grafana
    port: 15031
    targetPort: 15031
  selector:
    app: knative-ingressgateway
    knative: ingressgateway
  type: LoadBalancer
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: knative-ingressgateway
    chart: gateways-1.0.1
    heritage: Tiller
    knative: ingressgateway
    release: RELEASE-NAME
  name: knative-ingressgateway
  namespace: istio-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: knative-ingressgateway
      knative: ingressgateway
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        sidecar.istio.io/inject: "false"
      labels:
        app: knative-ingressgateway
        knative: ingressgateway
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x
            weight: 2
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
      containers:
      - args:
        - proxy
        - router
        - -v
        - "2"
        - --discoveryRefreshDelay
        - 1s
        - --drainDuration
        - 45s
        - --parentShutdownDuration
        - 1m0s
        - --connectTimeout
        - 10s
        - --serviceCluster
        - knative-ingressgateway
        - --zipkinAddress
        - zipkin:9411
        - --statsdUdpAddress
        - istio-statsd-prom-bridge:9125
        - --proxyAdminPort
        - "15000"
        - --controlPlaneAuthPolicy
        - NONE
        - --discoveryAddress
        - istio-pilot:8080
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: ISTIO_META_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: docker.io/istio/proxyv2:1.0.2
        imagePullPolicy: IfNotPresent
        name: istio-proxy
        ports:
        - containerPort: 80
        - containerPort: 443
        - containerPort: 31400
        - containerPort: 15011
        - containerPort: 8060
        - containerPort: 853
        - containerPort: 15030
        - containerPort: 15031
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /etc/certs
          name: istio-certs
          readOnly: true
        - mountPath: /etc/istio/ingressgateway-certs
          name: ingressgateway-certs
          readOnly: true
        - mountPath: /etc/istio/ingressgateway-ca-certs
          name: ingressgateway-ca-certs
          readOnly: true
      serviceAccountName: istio-ingressgateway-service-account
      volumes:
      - name: istio-certs
        secret:
          optional: true
          secretName: istio.istio-ingressgateway-service-account
      - name: ingressgateway-certs
        secret:
          optional: true
          secretName: istio-ingressgateway-certs
      - name: ingressgateway-ca-certs
        secret:
          optional: true
          secretName: istio-ingressgateway-ca-certs
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: knative-ingressgateway
  namespace: istio-system
spec:
  maxReplicas: 10
  metrics:
  - resource:
      name: cpu
      targetAverageUtilization: 60
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: knative-ingressgateway
---
---
apiVersion: config.istio.io/v1alpha2
kind: logentry
metadata:
  name: requestlog
  namespace: istio-system
spec:
  monitored_resource_type: '"UNSPECIFIED"'
  severity: '"Info"'
  timestamp: request.time
  variables:
    destinationConfiguration: destination.labels["serving.knative.dev/configuration"]
      | "unknown"
    destinationK8sService: destination.service | ""
    destinationNamespace: destination.namespace | ""
    destinationRevision: destination.labels["serving.knative.dev/revision"] | "unknown"
    destinationService: destination.labels["serving.knative.dev/service"] | "unknown"
    latency: response.duration | "0ms"
    method: request.method | ""
    protocol: request.scheme | "http"
    referer: request.referer | "unknown"
    requestHost: request.host | ""
    requestSize: request.size | 0
    responseCode: response.code | 0
    responseSize: response.size | 0
    sourceK8sService: source.service | "unknown"
    sourceNamespace: source.namespace | "unknown"
    traceId: request.headers["x-b3-traceid"] | "unknown"
    url: request.path | ""
    userAgent: request.useragent | "unknown"
---
apiVersion: config.istio.io/v1alpha2
kind: fluentd
metadata:
  name: requestloghandler
  namespace: istio-system
spec:
  address: fluentd-ds.knative-monitoring:24224
---
apiVersion: config.istio.io/v1alpha2
kind: rule
metadata:
  name: requestlogtofluentd
  namespace: istio-system
spec:
  actions:
  - handler: requestloghandler.fluentd
    instances:
    - requestlog.logentry
  match: "true"
---
apiVersion: config.istio.io/v1alpha2
kind: metric
metadata:
  name: revisionrequestcount
  namespace: istio-system
spec:
  dimensions:
    destination_configuration: destination.labels["serving.knative.dev/configuration"]
      | "unknown"
    destination_k8s_service: destination.service | "unknown"
    destination_namespace: destination.namespace | "unknown"
    destination_revision: destination.labels["serving.knative.dev/revision"] | "unknown"
    destination_service: destination.labels["serving.knative.dev/service"] | "unknown"
    response_code: response.code | 200
    source_k8s_service: source.service | "unknown"
  monitored_resource_type: '"UNSPECIFIED"'
  value: "1"
---
apiVersion: config.istio.io/v1alpha2
kind: metric
metadata:
  name: revisionrequestduration
  namespace: istio-system
spec:
  dimensions:
    destination_configuration: destination.labels["serving.knative.dev/configuration"]
      | "unknown"
    destination_k8s_service: destination.service | "unknown"
    destination_namespace: destination.namespace | "unknown"
    destination_revision: destination.labels["serving.knative.dev/revision"] | "unknown"
    destination_service: destination.labels["serving.knative.dev/service"] | "unknown"
    response_code: response.code | 200
    source_k8s_service: source.service | "unknown"
  monitored_resource_type: '"UNSPECIFIED"'
  value: response.duration | "0ms"
---
apiVersion: config.istio.io/v1alpha2
kind: metric
metadata:
  name: revisionrequestsize
  namespace: istio-system
spec:
  dimensions:
    destination_configuration: destination.labels["serving.knative.dev/configuration"]
      | "unknown"
    destination_k8s_service: destination.service | "unknown"
    destination_namespace: destination.namespace | "unknown"
    destination_revision: destination.labels["serving.knative.dev/revision"] | "unknown"
    destination_service: destination.labels["serving.knative.dev/service"] | "unknown"
    response_code: response.code | 200
    source_k8s_service: source.service | "unknown"
  monitored_resource_type: '"UNSPECIFIED"'
  value: request.size | 0
---
apiVersion: config.istio.io/v1alpha2
kind: metric
metadata:
  name: revisionresponsesize
  namespace: istio-system
spec:
  dimensions:
    destination_configuration: destination.labels["serving.knative.dev/configuration"]
      | "unknown"
    destination_k8s_service: destination.service | "unknown"
    destination_namespace: destination.namespace | "unknown"
    destination_revision: destination.labels["serving.knative.dev/revision"] | "unknown"
    destination_service: destination.labels["serving.knative.dev/service"] | "unknown"
    response_code: response.code | 200
    source_k8s_service: source.service | "unknown"
  monitored_resource_type: '"UNSPECIFIED"'
  value: response.size | 0
---
apiVersion: config.istio.io/v1alpha2
kind: prometheus
metadata:
  name: revisionpromhandler
  namespace: istio-system
spec:
  metrics:
  - instance_name: revisionrequestcount.metric.istio-system
    kind: COUNTER
    label_names:
    - source_k8s_service
    - destination_k8s_service
    - destination_namespace
    - destination_revision
    - destination_configuration
    - destination_service
    - response_code
    name: revision_request_count
  - buckets:
      explicit_buckets:
        bounds:
        - 0.005
        - 0.01
        - 0.025
        - 0.05
        - 0.1
        - 0.25
        - 0.5
        - 1
        - 2.5
        - 5
        - 10
    instance_name: revisionrequestduration.metric.istio-system
    kind: DISTRIBUTION
    label_names:
    - source_k8s_service
    - destination_k8s_service
    - destination_namespace
    - destination_revision
    - destination_configuration
    - destination_service
    - response_code
    name: revision_request_duration
  - buckets:
      exponentialBuckets:
        growthFactor: 10
        numFiniteBuckets: 8
        scale: 1
    instance_name: revisionrequestsize.metric.istio-system
    kind: DISTRIBUTION
    label_names:
    - source_k8s_service
    - destination_k8s_service
    - destination_namespace
    - destination_revision
    - destination_configuration
    - destination_service
    - response_code
    name: revision_request_size
  - buckets:
      exponentialBuckets:
        growthFactor: 10
        numFiniteBuckets: 8
        scale: 1
    instance_name: revisionresponsesize.metric.istio-system
    kind: DISTRIBUTION
    label_names:
    - source_k8s_service
    - destination_k8s_service
    - destination_namespace
    - destination_revision
    - destination_configuration
    - destination_service
    - response_code
    name: revision_response_size
---
apiVersion: config.istio.io/v1alpha2
kind: rule
metadata:
  labels:
    istio-protocol: http
  name: revisionpromhttp
  namespace: istio-system
spec:
  actions:
  - handler: revisionpromhandler.prometheus
    instances:
    - revisionrequestcount.metric
    - revisionrequestduration.metric
    - revisionrequestsize.metric
    - revisionresponsesize.metric
---
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prometheus-system
  namespace: istio-system
rules:
- apiGroups:
  - ""
  resources:
  - nodes/metrics
  - nodes
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus-system
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus-system
subjects:
- kind: ServiceAccount
  name: prometheus-system
  namespace: knative-monitoring

---
apiVersion: v1
kind: Service
metadata:
  name: zipkin
  namespace: istio-system
spec:
  ports:
  - name: http
    port: 9411
  selector:
    app: zipkin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zipkin
  namespace: istio-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zipkin
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: zipkin
    spec:
      containers:
      - env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: STORAGE_TYPE
          value: elasticsearch
        - name: ES_HOSTS
          value: elasticsearch-logging.knative-monitoring.svc.cluster.local:9200
        - name: ES_INDEX
          value: zipkin
        - name: ZIPKIN_UI_LOGS_URL
          value: http://localhost:8001/api/v1/namespaces/knative-monitoring/services/kibana-logging/proxy/app/kibana#/
        image: docker.io/openzipkin/zipkin:latest
        imagePullPolicy: IfNotPresent
        name: zipkin
        ports:
        - containerPort: 9411
